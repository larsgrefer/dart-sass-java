plugins {
    id "io.freefair.git-version" version "6.4.3.1"
    id "io.freefair.lombok" version "6.4.3" apply false
    id "io.freefair.maven-publish-java" version "6.4.3" apply false
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = '7c1c53f8a02656'
        }
    }
}

allprojects {
    repositories {
        mavenCentral()
    }

    group = "de.larsgrefer.sass"

    plugins.withId("java") {

        project.apply plugin: "io.freefair.lombok"
        project.apply plugin: "io.freefair.javadocs"

        java {
            withSourcesJar()
            withJavadocJar()
            toolchain {
                languageVersion = JavaLanguageVersion.of(8)
            }
        }

        tasks.withType(JavaCompile).configureEach {
            options.compilerArgs += "-parameters"
        }

        tasks.withType(Javadoc).configureEach {
            options.addBooleanOption("Xdoclint:-missing", true)
            failOnError = false
        }

        dependencies {
            testImplementation 'org.assertj:assertj-core:3.23.1'

            // Use JUnit Jupiter API for testing.
            testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'

            // Use JUnit Jupiter Engine for testing.
            testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
        }

        tasks.withType(Test).configureEach {
            useJUnitPlatform()
        }

        afterEvaluate {
            jar.manifest {
                attributes 'Implementation-Title': "$description",
                        'Implementation-Version': "$version",
                        'Implementation-URL': "https://github.com/larsgrefer/dart-sass-java"
            }
        }
    }

    plugins.withId("jacoco") {
        tasks.withType(JacocoReport).configureEach {
            reports.xml.required = true
        }
    }

    plugins.withId("maven-publish") {

        project.apply plugin: "io.freefair.maven-central.validate-poms"
        project.apply plugin: "signing"

        signing {
            required { !version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask("publish") }

            def signingKey = findProperty("signingKey")
            def signingPassword = findProperty("signingPassword")
            useInMemoryPgpKeys(signingKey, signingPassword)
        }

        publishing {
            publications.withType(MavenPublication) {
                pom {
                    url = 'https://github.com/larsgrefer/dart-sass-java/'
                    name = provider { project.description }
                    description = provider { project.description }
                    inceptionYear = '2021'
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://opensource.org/licenses/MIT'
                        }
                    }
                    developers {
                        developer {
                            id = 'larsgrefer'
                            name = 'Lars Grefer'
                            email = 'github@larsgrefer.de'
                            timezone = 'Europe/Berlin'
                        }
                    }
                    ciManagement {
                        system = 'GitHub Actions'
                        url = 'https://github.com/larsgrefer/dart-sass-java/actions'
                    }
                    issueManagement {
                        system = 'GitHub'
                        url = 'https://github.com/larsgrefer/dart-sass-java/issues'
                    }
                    scm {
                        connection = 'scm:git:https://github.com/larsgrefer/dart-sass-java.git'
                        developerConnection = 'scm:git:git@github.com:larsgrefer/dart-sass-java.git'
                        url = 'https://github.com/larsgrefer/dart-sass-java/'
                    }
                }
            }
        }

    }
}

tasks.named('wrapper') {
    distributionType = Wrapper.DistributionType.ALL
}
